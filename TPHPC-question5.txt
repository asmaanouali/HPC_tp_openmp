void gaussian(float a[N][N], int size, float l[N])
{
    for (int i = 0; i < size; i++)
    {
        for (int j = i + 1; j < size; j++)
        {
            l[j] = a[j][i] / a[i][i];
            for (int k = i; k < size; k++)
            {
                a[j][k] -= l[j] * a[i][k];
            }
        }
    }
}

int main(void)
{
    int size = N;
    float a[N][N];
    float l[N];

    random_fill(a, size);
    printf("***A***\n");
    print_matrix(a, size);

    clock_t start_t = clock();

    #pragma omp parallel
    {
        #pragma omp single
        {
            gaussian(a, size, l);
        }
    }

    clock_t end_t = clock();
    double running_t = (double)(end_t - start_t) / CLOCKS_PER_SEC;

    printf("***U***\n");
    print_matrix(a, size);
    printf("\nOrdre de la matrice = %d \n", N);
    printf("\nLe temps séquentiel pour le calcul de la décomposition Gaussienne de la matrice = %f s.\n", running_t);

    return 0;
}